hello this file explains how to run the server.

if you have any questions, feel free to message me. i had to go through a lot of installing and
trial and error to get this to work. this is just my guess at what you'll need to do based on
what i've figured out so far.

requirements:
- python
- django (https://docs.djangoproject.com/en/4.2/intro/install/)
- postgresql (https://www.postgresql.org/download/)
- pgadmin (https://www.pgadmin.org/download/)
- pip (https://pip.pypa.io/en/stable/)

steps:
1. open up pgadmin and create an account. pgadmin is just a GUI tool to interact with postgresql
2. right click databases and create a new database. this will be your database name (remember it)

Non linux based users:
3. create an .env file in server/backend with the following information

DB_NAME=[your database name]
DB_USER=postgres
DB_PASSWORD=[your password]
DB_HOST=127.0.0.1
DB_PORT=5432
DEBUG=on
SECRET_KEY=[there is a secret key i have shared it in the discord]

note about the key: i'm not really sure how the key works still. django created it, and my guess is that
it's used as some sort of hashing mechanism for the object relational mapper, not sure though.

Linux/Mac/(can run bash based users) can run the following commands while in /server:
3a. chmod +X setupEnv.sh
3b. ./setupEnv.sh [your database name] [your password] '[secret key]'
3c. source env/bin/activate

4. in terminal cd to server
5. run py manage.py migrate
6. run py manage.py runserver

testing the server:
by default, the server runs on port 8000
endpoints:
localhost:8000/api/events/ <- view events (GET)
localhost:8000/api/events/create <- create event (POST)
localhost:8000/api/events/uuid/subscribe <- subscribe to certain event (POST)
you can try out these endpoints with mockdata.
create receives a json in this format:
{
    "date": "23-05-05",
    "time": "01:02 PM",
    "title": "new event",
    "description": "this is a new event",
    "email": "ethan@email.com"
}
and returns back the same json except with a uuid (representing the event)
subscribe receives a json in this format:
{
    "name": "Ethan Ho",
    "email": "ethan@email.com"
}
and returns back the same json except with a uuid for the event subscribed to and a new uuid for the participant

alternatively, if you don't want to test out the endpoints or you don't have postman/any equivalent program,
you can create an admin account (https://docs.djangoproject.com/en/4.2/intro/tutorial02/) 
skip to the part where it says "Creating an admin user"